package handlers

import (
	"encoding/json"
	"log"
	"mini_BA/db"
	"net/http"

	"mini_BA/api"
	"mini_BA/models"
	"mini_BA/prompts"
)

func AnalyzeHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "üö´ Method Not Allowed", http.StatusMethodNotAllowed)
		return
	}

	var biz models.Business
	if err := json.NewDecoder(r.Body).Decode(&biz); err != nil {
		http.Error(w, "‚ùå Invalid JSON input", http.StatusBadRequest)
		log.Println("Decode error:", err)
		return
	}

	// üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
	prompt := prompts.GeneratePrompt(biz)
	response, err := api.GetGPTResponse(prompt)
	if err != nil {
		http.Error(w, "‚ùå Failed to get response from GPT", http.StatusInternalServerError)
		log.Println("GPT error:", err)
		return
	}

	// üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ email –∏ password —É–∫–∞–∑–∞–Ω—ã)
	if biz.Email != "" && biz.Password != "" {
		if err := db.SaveReport(biz.Email, biz.Password, response); err != nil {
			log.Println("‚ùå Failed to save report:", err)
		}
	}

	// ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(map[string]string{
		"response": response,
	}); err != nil {
		log.Println("‚ùå Failed to write response:", err)
	}
}

func RecommendHandler(w http.ResponseWriter, r *http.Request) {
	// –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª–∏
	var biz models.Business
	if err := json.NewDecoder(r.Body).Decode(&biz); err != nil {
		http.Error(w, "Invalid input", http.StatusBadRequest)
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è GPT
	prompt := prompts.GenerateRecommendationsPrompt(biz)

	// –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
	response, err := api.GetGPTResponse(prompt)
	if err != nil {
		http.Error(w, "Failed to get GPT response", http.StatusInternalServerError)
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ JSON-–ø–æ–ª–µ "response"
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"response": response,
	})
}
